namespace Pipelines {
    const fragShader = `
        precision mediump float;

        uniform sampler2D uMainSampler;
        uniform vec2 uResolution;

        varying vec2 outTexCoord;
        varying vec4 outTint;

        vec4 colorToPalette(vec4 incolor){
            float mindist = 10000.0;

            vec4 colors[42];

            colors[0] = vec4( 0.12941176470588237 , 0.09411764705882353 , 0.10588235294117647 , 1.0);
            colors[1] = vec4( 0.23137254901960785 , 0.12549019607843137 , 0.15294117647058825 , 1.0);
            colors[2] = vec4( 0.49019607843137253 , 0.2196078431372549 , 0.2 , 1.0);
            colors[3] = vec4( 0.6705882352941176 , 0.3176470588235294 , 0.18823529411764706 , 1.0);
            colors[4] = vec4( 0.8117647058823529 , 0.4588235294117647 , 0.16862745098039217 , 1.0);
            colors[5] = vec4( 0.9411764705882353 , 0.7098039215686275 , 0.2549019607843137 , 1.0);
            colors[6] = vec4( 1.0 , 0.9333333333333333 , 0.5137254901960784 , 1.0);
            colors[7] = vec4( 0.7843137254901961 , 0.8313725490196079 , 0.36470588235294116 , 1.0);
            colors[8] = vec4( 0.38823529411764707 , 0.6705882352941176 , 0.24705882352941178 , 1.0);
            colors[9] = vec4( 0.23137254901960785 , 0.49019607843137253 , 0.30980392156862746 , 1.0);
            colors[10] = vec4( 0.1843137254901961 , 0.3411764705882353 , 0.3254901960784314 , 1.0);
            colors[11] = vec4( 0.1568627450980392 , 0.20784313725490197 , 0.25098039215686274 , 1.0);
            colors[12] = vec4( 0.10588235294117647 , 0.12156862745098039 , 0.12941176470588237 , 1.0);
            colors[13] = vec4( 0.16862745098039217 , 0.16862745098039217 , 0.27058823529411763 , 1.0);
            colors[14] = vec4( 0.22745098039215686 , 0.24705882352941178 , 0.3686274509803922 , 1.0);
            colors[15] = vec4( 0.2980392156862745 , 0.40784313725490196 , 0.5215686274509804 , 1.0);
            colors[16] = vec4( 0.30980392156862746 , 0.6431372549019608 , 0.7215686274509804 , 1.0);
            colors[17] = vec4( 0.5725490196078431 , 0.9098039215686274 , 0.7529411764705882 , 1.0);
            colors[18] = vec4( 0.9607843137254902 , 1.0 , 0.9098039215686274 , 1.0);
            colors[19] = vec4( 0.8745098039215686 , 0.8784313725490196 , 0.9098039215686274 , 1.0);
            colors[20] = vec4( 0.6392156862745098 , 0.6549019607843137 , 0.7607843137254902 , 1.0);
            colors[21] = vec4( 0.40784313725490196 , 0.43529411764705883 , 0.6 , 1.0);
            colors[22] = vec4( 0.25098039215686274 , 0.28627450980392155 , 0.45098039215686275 , 1.0);
            colors[23] = vec4( 0.17254901960784313 , 0.20784313725490197 , 0.30196078431372547 , 1.0);
            colors[24] = vec4( 0.0784313725490196 , 0.09411764705882353 , 0.1803921568627451 , 1.0);
            colors[25] = vec4( 0.29411764705882354 , 0.11372549019607843 , 0.3215686274509804 , 1.0);
            colors[26] = vec4( 0.4117647058823529 , 0.1411764705882353 , 0.39215686274509803 , 1.0);
            colors[27] = vec4( 0.611764705882353 , 0.16470588235294117 , 0.4392156862745098 , 1.0);
            colors[28] = vec4( 0.8 , 0.1843137254901961 , 0.4823529411764706 , 1.0);
            colors[29] = vec4( 1.0 , 0.3215686274509804 , 0.4666666666666667 , 1.0);
            colors[30] = vec4( 1.0 , 0.7607843137254902 , 0.6313725490196078 , 1.0);
            colors[31] = vec4( 1.0 , 0.5372549019607843 , 0.2 , 1.0);
            colors[32] = vec4( 0.9019607843137255 , 0.27058823529411763 , 0.2235294117647059 , 1.0);
            colors[33] = vec4( 0.6784313725490196 , 0.1843137254901961 , 0.27058823529411763 , 1.0);
            colors[34] = vec4( 0.47058823529411764 , 0.11372549019607843 , 0.30980392156862746 , 1.0);
            colors[35] = vec4( 0.30980392156862746 , 0.11372549019607843 , 0.2980392156862745 , 1.0);
            colors[36] = vec4( 0.1607843137254902 , 0.11372549019607843 , 0.16862745098039217 , 1.0);
            colors[37] = vec4( 0.23921568627450981 , 0.1607843137254902 , 0.21176470588235294 , 1.0);
            colors[38] = vec4( 0.3215686274509804 , 0.2 , 0.24705882352941178 , 1.0);
            colors[39] = vec4( 0.5607843137254902 , 0.30196078431372547 , 0.3411764705882353 , 1.0);
            colors[40] = vec4( 0.7411764705882353 , 0.41568627450980394 , 0.3843137254901961 , 1.0);
            colors[41] = vec4( 1.0 , 06.823529411764706 , 0.4392156862745098 , 1.0);

            vec4 newColor;

            for(int i = 0; i < 42; i += 1)
            {
                float dist = distance(incolor, colors[i]);
                if(dist < mindist)
                {
                    newColor = colors[i];
                    mindist = dist;
                }
            }

            return newColor;
        }

        void main()
        {
            vec2 pixelSize = vec2(8.0, 8.0);
            vec2 dimensions = vec2(960.0, 540.0);
            vec2 size = dimensions.xy / pixelSize;
            vec2 color = floor((outTexCoord * size)) / size + pixelSize/dimensions.xy * 0.5;
            gl_FragColor = colorToPalette(texture2D(uMainSampler, color));
        }
    `;

    export class PixelatedFX extends Phaser.Renderer.WebGL.Pipelines.PostFXPipeline {
        constructor(game) {
            super({
                game,
                renderTarget: true,
                fragShader,
                //@ts-ignore
                uniforms: [
                    'uProjectionMatrix',
                    'uMainSampler',
                    'uTime',
                    'uResolution'
                ]
            });
        }

        onBoot() {
            this.set2f('uResolution', this.renderer.width, this.renderer.height);
        }

        onPreRender() {
            this.set1f('uTime', this.game.loop.time / 1000);
        }
    }
}